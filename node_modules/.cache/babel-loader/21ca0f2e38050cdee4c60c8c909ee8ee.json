{"ast":null,"code":"import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n  constructor(socket, headers, schema, tableName) {\n    const chanParams = {};\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n    const userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n\n    return records;\n  }\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n\n\n  on(event, callback) {\n    this.subscription.on(event, payload => {\n      let enrichedPayload = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {}\n      };\n      enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n      callback(enrichedPayload);\n    });\n    return this;\n  }\n  /**\n   * Enables the subscription.\n   */\n\n\n  subscribe(callback = () => {}) {\n    this.subscription.onError(e => callback('SUBSCRIPTION_ERROR', e));\n    this.subscription.onClose(() => callback('CLOSED'));\n    this.subscription.subscribe().receive('ok', () => callback('SUBSCRIBED')).receive('error', e => callback('SUBSCRIPTION_ERROR', e)).receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n    return this.subscription;\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/SupabaseRealtimeClient.ts"],"names":[],"mappings":"AAAA,SAA+C,YAA/C,QAAmE,uBAAnE;AAGA,OAAM,MAAO,sBAAP,CAA6B;AAGjC,EAAA,WAAA,CACE,MADF,EAEE,OAFF,EAGE,MAHF,EAIE,SAJF,EAImB;AAEjB,UAAM,UAAU,GAA8B,EAA9C;AACA,UAAM,KAAK,GAAG,SAAS,KAAK,GAAd,GAAoB,YAAY,MAAM,EAAtC,GAA2C,YAAY,MAAM,IAAI,SAAS,EAAxF;AACA,UAAM,SAAS,GAAG,OAAO,CAAC,eAAD,CAAP,CAAyB,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,SAA3B;AACD;;AAED,SAAK,YAAL,GAAoB,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,UAAtB,CAApB;AACD;;AAEO,EAAA,iBAAiB,CAAC,OAAD,EAAa;AACpC,UAAM,OAAO,GAAG;AACd,MAAA,GAAG,EAAE,EADS;AAEd,MAAA,GAAG,EAAE;AAFS,KAAhB;;AAKA,QAAI,OAAO,CAAC,IAAR,KAAiB,QAAjB,IAA6B,OAAO,CAAC,IAAR,KAAiB,QAAlD,EAA4D;AAC1D,MAAA,OAAO,CAAC,GAAR,GAAc,YAAY,CAAC,iBAAb,CAA+B,OAAO,CAAC,OAAvC,EAAgD,OAAO,CAAC,MAAxD,CAAd;AACD;;AAED,QAAI,OAAO,CAAC,IAAR,KAAiB,QAAjB,IAA6B,OAAO,CAAC,IAAR,KAAiB,QAAlD,EAA4D;AAC1D,MAAA,OAAO,CAAC,GAAR,GAAc,YAAY,CAAC,iBAAb,CAA+B,OAAO,CAAC,OAAvC,EAAgD,OAAO,CAAC,UAAxD,CAAd;AACD;;AAED,WAAO,OAAP;AACD;AAED;;;;;AAKG;;;AACH,EAAA,EAAE,CAAC,KAAD,EAA4B,QAA5B,EAAqF;AACrF,SAAK,YAAL,CAAkB,EAAlB,CAAqB,KAArB,EAA6B,OAAD,IAAiB;AAC3C,UAAI,eAAe,GAAiC;AAClD,QAAA,MAAM,EAAE,OAAO,CAAC,MADkC;AAElD,QAAA,KAAK,EAAE,OAAO,CAAC,KAFmC;AAGlD,QAAA,gBAAgB,EAAE,OAAO,CAAC,gBAHwB;AAIlD,QAAA,SAAS,EAAE,OAAO,CAAC,IAJ+B;AAKlD,QAAA,GAAG,EAAE,EAL6C;AAMlD,QAAA,GAAG,EAAE;AAN6C,OAApD;AASA,MAAA,eAAe,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,KAAK,iBAAL,CAAuB,OAAvB,CAA5B,CAAf;AAEA,MAAA,QAAQ,CAAC,eAAD,CAAR;AACD,KAbD;AAcA,WAAO,IAAP;AACD;AAED;;AAEG;;;AACH,EAAA,SAAS,CAAC,QAAA,GAAqB,MAAK,CAAG,CAA9B,EAA8B;AACrC,SAAK,YAAL,CAAkB,OAAlB,CAA2B,CAAD,IAAc,QAAQ,CAAC,oBAAD,EAAuB,CAAvB,CAAhD;AACA,SAAK,YAAL,CAAkB,OAAlB,CAA0B,MAAM,QAAQ,CAAC,QAAD,CAAxC;AACA,SAAK,YAAL,CACG,SADH,GAEG,OAFH,CAEW,IAFX,EAEiB,MAAM,QAAQ,CAAC,YAAD,CAF/B,EAGG,OAHH,CAGW,OAHX,EAGqB,CAAD,IAAc,QAAQ,CAAC,oBAAD,EAAuB,CAAvB,CAH1C,EAIG,OAJH,CAIW,SAJX,EAIsB,MAAM,QAAQ,CAAC,wBAAD,CAJpC;AAKA,WAAO,KAAK,YAAZ;AACD;;AAzEgC","sourceRoot":"","sourcesContent":["import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n    constructor(socket, headers, schema, tableName) {\n        const chanParams = {};\n        const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n        const userToken = headers['Authorization'].split(' ')[1];\n        if (userToken) {\n            chanParams['user_token'] = userToken;\n        }\n        this.subscription = socket.channel(topic, chanParams);\n    }\n    getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n    on(event, callback) {\n        this.subscription.on(event, (payload) => {\n            let enrichedPayload = {\n                schema: payload.schema,\n                table: payload.table,\n                commit_timestamp: payload.commit_timestamp,\n                eventType: payload.type,\n                new: {},\n                old: {},\n            };\n            enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n            callback(enrichedPayload);\n        });\n        return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n    subscribe(callback = () => { }) {\n        this.subscription.onError((e) => callback('SUBSCRIPTION_ERROR', e));\n        this.subscription.onClose(() => callback('CLOSED'));\n        this.subscription\n            .subscribe()\n            .receive('ok', () => callback('SUBSCRIBED'))\n            .receive('error', (e) => callback('SUBSCRIPTION_ERROR', e))\n            .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n        return this.subscription;\n    }\n}\n//# sourceMappingURL=SupabaseRealtimeClient.js.map"]},"metadata":{},"sourceType":"module"}