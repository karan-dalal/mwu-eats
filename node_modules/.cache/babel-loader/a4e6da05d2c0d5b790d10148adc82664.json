{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { stripTrailingSlash } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    supabaseUrl = stripTrailingSlash(supabaseUrl);\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = `${supabaseUrl}/rest/v1`;\n    this.realtimeUrl = `${supabaseUrl}/realtime/v1`.replace('http', 'ws');\n    this.authUrl = `${supabaseUrl}/auth/v1`;\n    this.storageUrl = `${supabaseUrl}/storage/v1`;\n    this.schema = settings.schema;\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(settings.realtime); // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders());\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.restUrl}/${table}`;\n    return new SupabaseQueryBuilder(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const rest = this._initPostgRESTClient();\n\n    return rest.rpc(fn, params, {\n      head,\n      count\n    });\n  }\n  /**\n   * Removes an active subscription and returns the number of open connections.\n   *\n   * @param subscription The subscription you want to remove.\n   */\n\n\n  removeSubscription(subscription) {\n    return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._closeSubscription(subscription);\n        const openSubscriptions = this.getSubscriptions().length;\n\n        if (!openSubscriptions) {\n          const {\n            error\n          } = yield this.realtime.disconnect();\n          if (error) return resolve({\n            error\n          });\n        }\n\n        return resolve({\n          error: null,\n          data: {\n            openSubscriptions\n          }\n        });\n      } catch (error) {\n        return resolve({\n          error\n        });\n      }\n    }));\n  }\n\n  _closeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!subscription.isClosed()) {\n        yield this._closeChannel(subscription);\n      }\n    });\n  }\n  /**\n   * Returns an array of all your subscriptions.\n   */\n\n\n  getSubscriptions() {\n    return this.realtime.channels;\n  }\n\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers\n  }) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, headers), authHeaders),\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n        apikey: this.supabaseKey\n      })\n    }));\n  }\n\n  _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema\n    });\n  }\n\n  _getAuthHeaders() {\n    var _a, _b;\n\n    const headers = DEFAULT_HEADERS;\n    const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n    headers['apikey'] = this.supabaseKey;\n    headers['Authorization'] = `Bearer ${authBearer}`;\n    return headers;\n  }\n\n  _closeChannel(subscription) {\n    return new Promise((resolve, reject) => {\n      subscription.unsubscribe().receive('ok', () => {\n        this.realtime.remove(subscription);\n        return resolve(true);\n      }).receive('error', e => reject(e));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/SupabaseClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,eAAT,QAAgC,iBAAhC;AACA,SAAS,kBAAT,QAAmC,eAAnC;AAEA,SAAS,kBAAT,QAAmC,0BAAnC;AACA,SAAS,oBAAT,QAAqC,4BAArC;AACA,SAAS,qBAAT,QAAsC,sBAAtC;AACA,SAAS,eAAT,QAAgC,wBAAhC;AACA,SAAS,cAAT,QAA4E,uBAA5E;AAEA,MAAM,eAAe,GAAG;AACtB,EAAA,MAAM,EAAE,QADc;AAEtB,EAAA,gBAAgB,EAAE,IAFI;AAGtB,EAAA,cAAc,EAAE,IAHM;AAItB,EAAA,kBAAkB,EAAE,IAJE;AAKtB,EAAA,OAAO,EAAE;AALa,CAAxB;AAQA;;;;AAIG;;AACH,eAAc,MAAO,cAAP,CAAqB;AAajC;;;;;;;;;;AAUG;AACH,EAAA,WAAA,CACY,WADZ,EAEY,WAFZ,EAGE,OAHF,EAGiC;AAFrB,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAGV,QAAI,CAAC,WAAL,EAAkB,MAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AAClB,QAAI,CAAC,WAAL,EAAkB,MAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AAElB,IAAA,WAAW,GAAG,kBAAkB,CAAC,WAAD,CAAhC;AAEA,UAAM,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,OAA5B,CAAd;AACA,SAAK,OAAL,GAAe,GAAG,WAAW,UAA7B;AACA,SAAK,WAAL,GAAmB,GAAG,WAAW,cAAd,CAA6B,OAA7B,CAAqC,MAArC,EAA6C,IAA7C,CAAnB;AACA,SAAK,OAAL,GAAe,GAAG,WAAW,UAA7B;AACA,SAAK,UAAL,GAAkB,GAAG,WAAW,aAAhC;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AAEA,SAAK,IAAL,GAAY,KAAK,uBAAL,CAA6B,QAA7B,CAAZ;AACA,SAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,QAAQ,CAAC,QAAlC,CAAhB,CAf+B,CAiB/B;AACA;AACA;AACA;AACD;AAED;;AAEG;;;AACQ,MAAP,OAAO,GAAA;AACT,WAAO,IAAI,qBAAJ,CAA0B,KAAK,UAA/B,EAA2C,KAAK,eAAL,EAA3C,CAAP;AACD;AAED;;;;AAIG;;;AACH,EAAA,IAAI,CAAU,KAAV,EAAuB;AACzB,UAAM,GAAG,GAAG,GAAG,KAAK,OAAO,IAAI,KAAK,EAApC;AACA,WAAO,IAAI,oBAAJ,CAA4B,GAA5B,EAAiC;AACtC,MAAA,OAAO,EAAE,KAAK,eAAL,EAD6B;AAEtC,MAAA,MAAM,EAAE,KAAK,MAFyB;AAGtC,MAAA,QAAQ,EAAE,KAAK,QAHuB;AAItC,MAAA;AAJsC,KAAjC,CAAP;AAMD;AAED;;;;;;;;AAQG;;;AACH,EAAA,GAAG,CACD,EADC,EAED,MAFC,EAGD;AACE,IAAA,IAAI,GAAG,KADT;AAEE,IAAA,KAAK,GAAG;AAFV,MAG0E,EANzE,EAM2E;AAE5E,UAAM,IAAI,GAAG,KAAK,oBAAL,EAAb;;AACA,WAAO,IAAI,CAAC,GAAL,CAAY,EAAZ,EAAgB,MAAhB,EAAwB;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAxB,CAAP;AACD;AAED;;;;AAIG;;;AACH,EAAA,kBAAkB,CAAC,YAAD,EAAmC;AACnD,WAAO,IAAI,OAAJ,CAAmB,OAAP,IAAkB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnC,UAAI;AACF,cAAM,KAAK,kBAAL,CAAwB,YAAxB,CAAN;AAEA,cAAM,iBAAiB,GAAG,KAAK,gBAAL,GAAwB,MAAlD;;AACA,YAAI,CAAC,iBAAL,EAAwB;AACtB,gBAAM;AAAE,YAAA;AAAF,cAAY,MAAM,KAAK,QAAL,CAAc,UAAd,EAAxB;AACA,cAAI,KAAJ,EAAW,OAAO,OAAO,CAAC;AAAE,YAAA;AAAF,WAAD,CAAd;AACZ;;AACD,eAAO,OAAO,CAAC;AAAE,UAAA,KAAK,EAAE,IAAT;AAAe,UAAA,IAAI,EAAE;AAAE,YAAA;AAAF;AAArB,SAAD,CAAd;AACD,OATD,CASE,OAAO,KAAP,EAAc;AACd,eAAO,OAAO,CAAC;AAAE,UAAA;AAAF,SAAD,CAAd;AACD;AACF,KAboC,CAA9B,CAAP;AAcD;;AAEa,EAAA,kBAAkB,CAAC,YAAD,EAAmC;;AACjE,UAAI,CAAC,YAAY,CAAC,QAAb,EAAL,EAA8B;AAC5B,cAAM,KAAK,aAAL,CAAmB,YAAnB,CAAN;AACD;AACF,K;AAAA;AAED;;AAEG;;;AACH,EAAA,gBAAgB,GAAA;AACd,WAAO,KAAK,QAAL,CAAc,QAArB;AACD;;AAEO,EAAA,uBAAuB,CAAC;AAC9B,IAAA,gBAD8B;AAE9B,IAAA,cAF8B;AAG9B,IAAA,kBAH8B;AAI9B,IAAA,YAJ8B;AAK9B,IAAA;AAL8B,GAAD,EAMP;AACtB,UAAM,WAAW,GAAG;AAClB,MAAA,aAAa,EAAE,UAAU,KAAK,WAAW,EADvB;AAElB,MAAA,MAAM,EAAE,GAAG,KAAK,WAAW;AAFT,KAApB;AAIA,WAAO,IAAI,kBAAJ,CAAuB;AAC5B,MAAA,GAAG,EAAE,KAAK,OADkB;AAE5B,MAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,OAAP,CAAA,EAAmB,WAAnB,CAFqB;AAG5B,MAAA,gBAH4B;AAI5B,MAAA,cAJ4B;AAK5B,MAAA,kBAL4B;AAM5B,MAAA;AAN4B,KAAvB,CAAP;AAQD;;AAEO,EAAA,mBAAmB,CAAC,OAAD,EAAgC;AACzD,WAAO,IAAI,cAAJ,CAAmB,KAAK,WAAxB,EAAmC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACrC,OADqC,CAAA,EAC9B;AACV,MAAA,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAhB,CAAA,EAAsB;AAAE,QAAA,MAAM,EAAE,KAAK;AAAf,OAAtB;AADI,KAD8B,CAAnC,CAAP;AAID;;AAEO,EAAA,oBAAoB,GAAA;AAC1B,WAAO,IAAI,eAAJ,CAAoB,KAAK,OAAzB,EAAkC;AACvC,MAAA,OAAO,EAAE,KAAK,eAAL,EAD8B;AAEvC,MAAA,MAAM,EAAE,KAAK;AAF0B,KAAlC,CAAP;AAID;;AAEO,EAAA,eAAe,GAAA;;;AACrB,UAAM,OAAO,GAA8B,eAA3C;AACA,UAAM,UAAU,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAK,IAAL,CAAU,OAAV,EAAH,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,YAAxB,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,EAApC,GAAwC,KAAK,WAA7D;AACA,IAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAK,WAAzB;AACA,IAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,UAAU,UAAU,EAA/C;AACA,WAAO,OAAP;AACD;;AAEO,EAAA,aAAa,CAAC,YAAD,EAAmC;AACtD,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,MAAA,YAAY,CACT,WADH,GAEG,OAFH,CAEW,IAFX,EAEiB,MAAK;AAClB,aAAK,QAAL,CAAc,MAAd,CAAqB,YAArB;AACA,eAAO,OAAO,CAAC,IAAD,CAAd;AACD,OALH,EAMG,OANH,CAMW,OANX,EAMqB,CAAD,IAAc,MAAM,CAAC,CAAD,CANxC;AAOD,KARM,CAAP;AASD;;AArLgC","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { stripTrailingSlash } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n    schema: 'public',\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    headers: DEFAULT_HEADERS,\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.headers Any additional headers to send with each network request.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        supabaseUrl = stripTrailingSlash(supabaseUrl);\n        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        this.restUrl = `${supabaseUrl}/rest/v1`;\n        this.realtimeUrl = `${supabaseUrl}/realtime/v1`.replace('http', 'ws');\n        this.authUrl = `${supabaseUrl}/auth/v1`;\n        this.storageUrl = `${supabaseUrl}/storage/v1`;\n        this.schema = settings.schema;\n        this.auth = this._initSupabaseAuthClient(settings);\n        this.realtime = this._initRealtimeClient(settings.realtime);\n        // In the future we might allow the user to pass in a logger to receive these events.\n        // this.realtime.onOpen(() => console.log('OPEN'))\n        // this.realtime.onClose(() => console.log('CLOSED'))\n        // this.realtime.onError((e: Error) => console.log('Socket error', e))\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders());\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table The table name to operate on.\n     */\n    from(table) {\n        const url = `${this.restUrl}/${table}`;\n        return new SupabaseQueryBuilder(url, {\n            headers: this._getAuthHeaders(),\n            schema: this.schema,\n            realtime: this.realtime,\n            table,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head   When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc(fn, params, { head = false, count = null, } = {}) {\n        const rest = this._initPostgRESTClient();\n        return rest.rpc(fn, params, { head, count });\n    }\n    /**\n     * Removes an active subscription and returns the number of open connections.\n     *\n     * @param subscription The subscription you want to remove.\n     */\n    removeSubscription(subscription) {\n        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._closeSubscription(subscription);\n                const openSubscriptions = this.getSubscriptions().length;\n                if (!openSubscriptions) {\n                    const { error } = yield this.realtime.disconnect();\n                    if (error)\n                        return resolve({ error });\n                }\n                return resolve({ error: null, data: { openSubscriptions } });\n            }\n            catch (error) {\n                return resolve({ error });\n            }\n        }));\n    }\n    _closeSubscription(subscription) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!subscription.isClosed()) {\n                yield this._closeChannel(subscription);\n            }\n        });\n    }\n    /**\n     * Returns an array of all your subscriptions.\n     */\n    getSubscriptions() {\n        return this.realtime.channels;\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, localStorage, headers, }) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, headers), authHeaders),\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            localStorage,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), { apikey: this.supabaseKey }) }));\n    }\n    _initPostgRESTClient() {\n        return new PostgrestClient(this.restUrl, {\n            headers: this._getAuthHeaders(),\n            schema: this.schema,\n        });\n    }\n    _getAuthHeaders() {\n        var _a, _b;\n        const headers = DEFAULT_HEADERS;\n        const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n        headers['apikey'] = this.supabaseKey;\n        headers['Authorization'] = `Bearer ${authBearer}`;\n        return headers;\n    }\n    _closeChannel(subscription) {\n        return new Promise((resolve, reject) => {\n            subscription\n                .unsubscribe()\n                .receive('ok', () => {\n                this.realtime.remove(subscription);\n                return resolve(true);\n            })\n                .receive('error', (e) => reject(e));\n        });\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map"]},"metadata":{},"sourceType":"module"}