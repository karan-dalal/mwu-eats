{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, {\n    headers = {},\n    schema,\n    realtime,\n    table\n  }) {\n    super(url, {\n      headers,\n      schema\n    });\n    this._subscription = new SupabaseRealtimeClient(realtime, headers, schema, table);\n    this._realtime = realtime;\n  }\n  /**\n   * Subscribe to realtime changes in your databse.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n\n    return this._subscription.on(event, callback);\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/SupabaseQueryBuilder.ts"],"names":[],"mappings":"AAAA,SAAS,qBAAT,QAAsC,wBAAtC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAIA,OAAM,MAAO,oBAAP,SAAuC,qBAAvC,CAA+D;AAInE,EAAA,WAAA,CACE,GADF,EAEE;AACE,IAAA,OAAO,GAAG,EADZ;AAEE,IAAA,MAFF;AAGE,IAAA,QAHF;AAIE,IAAA;AAJF,GAFF,EAYG;AAED,UAAM,GAAN,EAAW;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,KAAX;AAEA,SAAK,aAAL,GAAqB,IAAI,sBAAJ,CAA2B,QAA3B,EAAqC,OAArC,EAA8C,MAA9C,EAAsD,KAAtD,CAArB;AACA,SAAK,SAAL,GAAiB,QAAjB;AACD;AAED;;;;AAIG;;;AACH,EAAA,EAAE,CACA,KADA,EAEA,QAFA,EAEuD;AAEvD,QAAI,CAAC,KAAK,SAAL,CAAe,WAAf,EAAL,EAAmC;AACjC,WAAK,SAAL,CAAe,OAAf;AACD;;AACD,WAAO,KAAK,aAAL,CAAmB,EAAnB,CAAsB,KAAtB,EAA6B,QAA7B,CAAP;AACD;;AArCkE","sourceRoot":"","sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, realtime, table, }) {\n        super(url, { headers, schema });\n        this._subscription = new SupabaseRealtimeClient(realtime, headers, schema, table);\n        this._realtime = realtime;\n    }\n    /**\n     * Subscribe to realtime changes in your databse.\n     * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n     * @param callback A callback that will handle the payload that is sent whenever your database changes.\n     */\n    on(event, callback) {\n        if (!this._realtime.isConnected()) {\n            this._realtime.connect();\n        }\n        return this._subscription.on(event, callback);\n    }\n}\n//# sourceMappingURL=SupabaseQueryBuilder.js.map"]},"metadata":{},"sourceType":"module"}