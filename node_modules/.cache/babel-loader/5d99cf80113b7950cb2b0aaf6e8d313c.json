{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, put, remove } from './lib/fetch';\nimport { COOKIE_OPTIONS } from './lib/constants';\nimport { setCookie, deleteCookie } from './lib/cookies';\nimport { expiresAt } from './lib/helpers';\nexport default class GoTrueApi {\n  constructor({\n    url = '',\n    headers = {},\n    cookieOptions\n  }) {\n    this.url = url;\n    this.headers = headers;\n    this.cookieOptions = Object.assign(Object.assign({}, COOKIE_OPTIONS), cookieOptions);\n  }\n  /**\n   * Creates a new user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n\n\n  signUpWithEmail(email, password, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '';\n\n        if (options.redirectTo) {\n          queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo);\n        }\n\n        const data = yield post(`${this.url}/signup${queryString}`, {\n          email,\n          password,\n          data: options.data\n        }, {\n          headers\n        });\n        let session = Object.assign({}, data);\n        if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n        return {\n          data: session,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Logs in an existing user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  signInWithEmail(email, password, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '?grant_type=password';\n\n        if (options.redirectTo) {\n          queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo);\n        }\n\n        const data = yield post(`${this.url}/token${queryString}`, {\n          email,\n          password\n        }, {\n          headers\n        });\n        let session = Object.assign({}, data);\n        if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n        return {\n          data: session,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Signs up a new user using their phone number and a password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param data Optional user metadata.\n   */\n\n\n  signUpWithPhone(phone, password, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        const data = yield post(`${this.url}/signup`, {\n          phone,\n          password,\n          data: options.data\n        }, {\n          headers\n        });\n        let session = Object.assign({}, data);\n        if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n        return {\n          data: session,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Logs in an existing user using their phone number and password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   */\n\n\n  signInWithPhone(phone, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '?grant_type=password';\n        const data = yield post(`${this.url}/token${queryString}`, {\n          phone,\n          password\n        }, {\n          headers\n        });\n        let session = Object.assign({}, data);\n        if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n        return {\n          data: session,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Sends a magic login link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  sendMagicLinkEmail(email, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '';\n\n        if (options.redirectTo) {\n          queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n        }\n\n        const data = yield post(`${this.url}/magiclink${queryString}`, {\n          email\n        }, {\n          headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n   * @param phone The user's phone number WITH international prefix\n   */\n\n\n  sendMobileOTP(phone) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        const data = yield post(`${this.url}/otp`, {\n          phone\n        }, {\n          headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Send User supplied Mobile OTP to be verified\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  verifyMobileOTP(phone, token, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        const data = yield post(`${this.url}/verify`, {\n          phone,\n          token,\n          type: 'sms',\n          redirect_to: options.redirectTo\n        }, {\n          headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata\n   */\n\n\n  inviteUserByEmail(email, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '';\n\n        if (options.redirectTo) {\n          queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n        }\n\n        const data = yield post(`${this.url}/invite${queryString}`, {\n          email,\n          data: options.data\n        }, {\n          headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Sends a reset request to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  resetPasswordForEmail(email, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let headers = Object.assign({}, this.headers);\n        let queryString = '';\n\n        if (options.redirectTo) {\n          queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n        }\n\n        const data = yield post(`${this.url}/recover${queryString}`, {\n          email\n        }, {\n          headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Create a temporary object with all configured headers and\n   * adds the Authorization token to be used on request methods\n   * @param jwt A valid, logged-in JWT.\n   */\n\n\n  _createRequestHeaders(jwt) {\n    const headers = Object.assign({}, this.headers);\n    headers['Authorization'] = `Bearer ${jwt}`;\n    return headers;\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n\n\n  signOut(jwt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield post(`${this.url}/logout`, {}, {\n          headers: this._createRequestHeaders(jwt),\n          noResolveJson: true\n        });\n        return {\n          error: null\n        };\n      } catch (error) {\n        return {\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n\n\n  getUrlForProvider(provider, options) {\n    let urlParams = [`provider=${encodeURIComponent(provider)}`];\n\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n    }\n\n    return `${this.url}/authorize?${urlParams.join('&')}`;\n  }\n  /**\n   * Gets the user details.\n   * @param jwt A valid, logged-in JWT.\n   */\n\n\n  getUser(jwt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(`${this.url}/user`, {\n          headers: this._createRequestHeaders(jwt)\n        });\n        return {\n          user: data,\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          user: null,\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Updates the user data.\n   * @param jwt A valid, logged-in JWT.\n   * @param attributes The data you want to update.\n   */\n\n\n  updateUser(jwt, attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(`${this.url}/user`, attributes, {\n          headers: this._createRequestHeaders(jwt)\n        });\n        return {\n          user: data,\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          user: null,\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param uid The user uid you want to remove.\n   * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n   */\n\n\n  deleteUser(uid, jwt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(`${this.url}/admin/users/${uid}`, {}, {\n          headers: this._createRequestHeaders(jwt)\n        });\n        return {\n          user: data,\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          user: null,\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n\n\n  refreshAccessToken(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(`${this.url}/token?grant_type=refresh_token`, {\n          refresh_token: refreshToken\n        }, {\n          headers: this.headers\n        });\n        let session = Object.assign({}, data);\n        if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n        return {\n          data: session,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Set/delete the auth cookie based on the AuthChangeEvent.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n\n\n  setAuthCookie(req, res) {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST');\n      res.status(405).end('Method Not Allowed');\n    }\n\n    const {\n      event,\n      session\n    } = req.body;\n    if (!event) throw new Error('Auth event missing!');\n\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!');\n      setCookie(req, res, {\n        name: this.cookieOptions.name,\n        value: session.access_token,\n        domain: this.cookieOptions.domain,\n        maxAge: this.cookieOptions.lifetime,\n        path: this.cookieOptions.path,\n        sameSite: this.cookieOptions.sameSite\n      });\n    }\n\n    if (event === 'SIGNED_OUT') deleteCookie(req, res, this.cookieOptions.name);\n    res.status(200).json({});\n  }\n  /**\n   * Get user by reading the cookie from the request.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n\n\n  getUserByCookie(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!req.cookies) throw new Error('Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!');\n        if (!req.cookies[this.cookieOptions.name]) throw new Error('No cookie found!');\n        const token = req.cookies[this.cookieOptions.name];\n        const {\n          user,\n          error\n        } = yield this.getUser(token);\n        if (error) throw error;\n        return {\n          user,\n          data: user,\n          error: null\n        };\n      } catch (error) {\n        return {\n          user: null,\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Generates links to be sent via email or other.\n   * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   * @param email The user's email.\n   * @param password User password. For signup only.\n   * @param data Optional user metadata. For signup only.\n   * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   */\n\n\n  generateLink(type, email, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(`${this.url}/admin/generate_link`, {\n          type,\n          email,\n          password: options.password,\n          data: options.data,\n          redirect_to: options.redirectTo\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/GoTrueApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { get, post, put, remove } from './lib/fetch';\nimport { COOKIE_OPTIONS } from './lib/constants';\nimport { setCookie, deleteCookie } from './lib/cookies';\nimport { expiresAt } from './lib/helpers';\nexport default class GoTrueApi {\n    constructor({ url = '', headers = {}, cookieOptions, }) {\n        this.url = url;\n        this.headers = headers;\n        this.cookieOptions = Object.assign(Object.assign({}, COOKIE_OPTIONS), cookieOptions);\n    }\n    /**\n     * Creates a new user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    signUpWithEmail(email, password, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '';\n                if (options.redirectTo) {\n                    queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                const data = yield post(`${this.url}/signup${queryString}`, { email, password, data: options.data }, { headers });\n                let session = Object.assign({}, data);\n                if (session.expires_in)\n                    session.expires_at = expiresAt(data.expires_in);\n                return { data: session, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Logs in an existing user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    signInWithEmail(email, password, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '?grant_type=password';\n                if (options.redirectTo) {\n                    queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                const data = yield post(`${this.url}/token${queryString}`, { email, password }, { headers });\n                let session = Object.assign({}, data);\n                if (session.expires_in)\n                    session.expires_at = expiresAt(data.expires_in);\n                return { data: session, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Signs up a new user using their phone number and a password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     * @param data Optional user metadata.\n     */\n    signUpWithPhone(phone, password, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                const data = yield post(`${this.url}/signup`, { phone, password, data: options.data }, { headers });\n                let session = Object.assign({}, data);\n                if (session.expires_in)\n                    session.expires_at = expiresAt(data.expires_in);\n                return { data: session, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Logs in an existing user using their phone number and password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     */\n    signInWithPhone(phone, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '?grant_type=password';\n                const data = yield post(`${this.url}/token${queryString}`, { phone, password }, { headers });\n                let session = Object.assign({}, data);\n                if (session.expires_in)\n                    session.expires_at = expiresAt(data.expires_in);\n                return { data: session, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Sends a magic login link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    sendMagicLinkEmail(email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '';\n                if (options.redirectTo) {\n                    queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                const data = yield post(`${this.url}/magiclink${queryString}`, { email }, { headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n     * @param phone The user's phone number WITH international prefix\n     */\n    sendMobileOTP(phone) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                const data = yield post(`${this.url}/otp`, { phone }, { headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Send User supplied Mobile OTP to be verified\n     * @param phone The user's phone number WITH international prefix\n     * @param token token that user was sent to their mobile phone\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    verifyMobileOTP(phone, token, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                const data = yield post(`${this.url}/verify`, { phone, token, type: 'sms', redirect_to: options.redirectTo }, { headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata\n     */\n    inviteUserByEmail(email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '';\n                if (options.redirectTo) {\n                    queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                const data = yield post(`${this.url}/invite${queryString}`, { email, data: options.data }, { headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Sends a reset request to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    resetPasswordForEmail(email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let headers = Object.assign({}, this.headers);\n                let queryString = '';\n                if (options.redirectTo) {\n                    queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                const data = yield post(`${this.url}/recover${queryString}`, { email }, { headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Create a temporary object with all configured headers and\n     * adds the Authorization token to be used on request methods\n     * @param jwt A valid, logged-in JWT.\n     */\n    _createRequestHeaders(jwt) {\n        const headers = Object.assign({}, this.headers);\n        headers['Authorization'] = `Bearer ${jwt}`;\n        return headers;\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     */\n    signOut(jwt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield post(`${this.url}/logout`, {}, { headers: this._createRequestHeaders(jwt), noResolveJson: true });\n                return { error: null };\n            }\n            catch (error) {\n                return { error };\n            }\n        });\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param provider One of the providers supported by GoTrue.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param scopes A space-separated list of scopes granted to the OAuth application.\n     */\n    getUrlForProvider(provider, options) {\n        let urlParams = [`provider=${encodeURIComponent(provider)}`];\n        if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n            urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.scopes) {\n            urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n        }\n        return `${this.url}/authorize?${urlParams.join('&')}`;\n    }\n    /**\n     * Gets the user details.\n     * @param jwt A valid, logged-in JWT.\n     */\n    getUser(jwt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(`${this.url}/user`, { headers: this._createRequestHeaders(jwt) });\n                return { user: data, data, error: null };\n            }\n            catch (error) {\n                return { user: null, data: null, error };\n            }\n        });\n    }\n    /**\n     * Updates the user data.\n     * @param jwt A valid, logged-in JWT.\n     * @param attributes The data you want to update.\n     */\n    updateUser(jwt, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(`${this.url}/user`, attributes, {\n                    headers: this._createRequestHeaders(jwt),\n                });\n                return { user: data, data, error: null };\n            }\n            catch (error) {\n                return { user: null, data: null, error };\n            }\n        });\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param uid The user uid you want to remove.\n     * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n     */\n    deleteUser(uid, jwt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(`${this.url}/admin/users/${uid}`, {}, {\n                    headers: this._createRequestHeaders(jwt),\n                });\n                return { user: data, data, error: null };\n            }\n            catch (error) {\n                return { user: null, data: null, error };\n            }\n        });\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    refreshAccessToken(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(`${this.url}/token?grant_type=refresh_token`, { refresh_token: refreshToken }, { headers: this.headers });\n                let session = Object.assign({}, data);\n                if (session.expires_in)\n                    session.expires_at = expiresAt(data.expires_in);\n                return { data: session, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Set/delete the auth cookie based on the AuthChangeEvent.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n    setAuthCookie(req, res) {\n        if (req.method !== 'POST') {\n            res.setHeader('Allow', 'POST');\n            res.status(405).end('Method Not Allowed');\n        }\n        const { event, session } = req.body;\n        if (!event)\n            throw new Error('Auth event missing!');\n        if (event === 'SIGNED_IN') {\n            if (!session)\n                throw new Error('Auth session missing!');\n            setCookie(req, res, {\n                name: this.cookieOptions.name,\n                value: session.access_token,\n                domain: this.cookieOptions.domain,\n                maxAge: this.cookieOptions.lifetime,\n                path: this.cookieOptions.path,\n                sameSite: this.cookieOptions.sameSite,\n            });\n        }\n        if (event === 'SIGNED_OUT')\n            deleteCookie(req, res, this.cookieOptions.name);\n        res.status(200).json({});\n    }\n    /**\n     * Get user by reading the cookie from the request.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n    getUserByCookie(req) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!req.cookies)\n                    throw new Error('Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!');\n                if (!req.cookies[this.cookieOptions.name])\n                    throw new Error('No cookie found!');\n                const token = req.cookies[this.cookieOptions.name];\n                const { user, error } = yield this.getUser(token);\n                if (error)\n                    throw error;\n                return { user, data: user, error: null };\n            }\n            catch (error) {\n                return { user: null, data: null, error };\n            }\n        });\n    }\n    /**\n     * Generates links to be sent via email or other.\n     * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     * @param email The user's email.\n     * @param password User password. For signup only.\n     * @param data Optional user metadata. For signup only.\n     * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     */\n    generateLink(type, email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(`${this.url}/admin/generate_link`, {\n                    type,\n                    email,\n                    password: options.password,\n                    data: options.data,\n                    redirect_to: options.redirectTo,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=GoTrueApi.js.map"]},"metadata":{},"sourceType":"module"}