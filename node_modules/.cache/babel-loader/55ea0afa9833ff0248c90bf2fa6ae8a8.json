{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS } from './lib/constants';\nimport Timer from './lib/timer';\nimport RealtimeSubscription from './RealtimeSubscription';\nimport { w3cwebsocket as WebSocket } from 'websocket';\nimport Serializer from './lib/serializer';\n\nconst noop = () => {};\n\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = WebSocket;\n    this.heartbeatIntervalMs = 30000;\n    this.longpollerTimeout = 20000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    if (options === null || options === void 0 ? void 0 : options.longpollerTimeout) this.longpollerTimeout = options.longpollerTimeout;\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n\n    if (this.conn) {\n      // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this.onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    return new Promise((resolve, _reject) => {\n      try {\n        if (this.conn) {\n          this.conn.onclose = function () {}; // noop\n\n\n          if (code) {\n            this.conn.close(code, reason || '');\n          } else {\n            this.conn.close();\n          }\n\n          this.conn = null; // remove open handles\n\n          this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n          this.reconnectTimer.reset();\n        }\n\n        resolve({\n          error: null,\n          data: true\n        });\n      } catch (error) {\n        resolve({\n          error,\n          data: false\n        });\n      }\n    });\n  }\n  /**\n   * Logs the message. Override `this.logger` for specialized logging.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Registers a callback for connection state change event.\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket opened.\"))\n   */\n\n\n  onOpen(callback) {\n    this.stateChangeCallbacks.open.push(callback);\n  }\n  /**\n   * Registers a callbacks for connection state change events.\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket closed.\"))\n   */\n\n\n  onClose(callback) {\n    this.stateChangeCallbacks.close.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen((error) => console.log(\"An error occurred\"))\n   */\n\n\n  onError(callback) {\n    this.stateChangeCallbacks.error.push(callback);\n  }\n  /**\n   * Calls a function any time a message is received.\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onMessage((message) => console.log(message))\n   */\n\n\n  onMessage(callback) {\n    this.stateChangeCallbacks.message.push(callback);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return 'connecting';\n\n      case SOCKET_STATES.open:\n        return 'open';\n\n      case SOCKET_STATES.closing:\n        return 'closing';\n\n      default:\n        return 'closed';\n    }\n  }\n  /**\n   * Retuns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === 'open';\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   */\n\n\n  remove(channel) {\n    this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n  }\n\n  channel(topic, chanParams = {}) {\n    let chan = new RealtimeSubscription(topic, chanParams, this);\n    this.channels.push(chan);\n    return chan;\n  }\n\n  push(data) {\n    let {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n      } else if (event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this._resetHeartbeat();\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel.isMember(topic)).forEach(channel => channel.trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /**\n   * Returns the URL of the websocket.\n   */\n\n\n  endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   */\n\n\n  makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this.endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n\n    this._resetHeartbeat();\n\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel.trigger(CHANNEL_EVENTS.error));\n  }\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n\n  _resetHeartbeat() {\n    this.pendingHeartbeatRef = null;\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n  }\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this.makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/RealtimeClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, } from './lib/constants';\nimport Timer from './lib/timer';\nimport RealtimeSubscription from './RealtimeSubscription';\nimport { w3cwebsocket as WebSocket } from 'websocket';\nimport Serializer from './lib/serializer';\nconst noop = () => { };\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     */\n    constructor(endPoint, options) {\n        this.channels = [];\n        this.endPoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.transport = WebSocket;\n        this.heartbeatIntervalMs = 30000;\n        this.longpollerTimeout = 20000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.transport)\n            this.transport = options.transport;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        if (options === null || options === void 0 ? void 0 : options.longpollerTimeout)\n            this.longpollerTimeout = options.longpollerTimeout;\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.disconnect();\n            this.connect();\n        }), this.reconnectAfterMs);\n    }\n    /**\n     * Connects the socket.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n        if (this.conn) {\n            // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this.onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        return new Promise((resolve, _reject) => {\n            try {\n                if (this.conn) {\n                    this.conn.onclose = function () { }; // noop\n                    if (code) {\n                        this.conn.close(code, reason || '');\n                    }\n                    else {\n                        this.conn.close();\n                    }\n                    this.conn = null;\n                    // remove open handles\n                    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n                    this.reconnectTimer.reset();\n                }\n                resolve({ error: null, data: true });\n            }\n            catch (error) {\n                resolve({ error, data: false });\n            }\n        });\n    }\n    /**\n     * Logs the message. Override `this.logger` for specialized logging.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Registers a callback for connection state change event.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket opened.\"))\n     */\n    onOpen(callback) {\n        this.stateChangeCallbacks.open.push(callback);\n    }\n    /**\n     * Registers a callbacks for connection state change events.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket closed.\"))\n     */\n    onClose(callback) {\n        this.stateChangeCallbacks.close.push(callback);\n    }\n    /**\n     * Registers a callback for connection state change events.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen((error) => console.log(\"An error occurred\"))\n     */\n    onError(callback) {\n        this.stateChangeCallbacks.error.push(callback);\n    }\n    /**\n     * Calls a function any time a message is received.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onMessage((message) => console.log(message))\n     */\n    onMessage(callback) {\n        this.stateChangeCallbacks.message.push(callback);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return 'connecting';\n            case SOCKET_STATES.open:\n                return 'open';\n            case SOCKET_STATES.closing:\n                return 'closing';\n            default:\n                return 'closed';\n        }\n    }\n    /**\n     * Retuns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === 'open';\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     */\n    remove(channel) {\n        this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());\n    }\n    channel(topic, chanParams = {}) {\n        let chan = new RealtimeSubscription(topic, chanParams, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    push(data) {\n        let { topic, event, payload, ref } = data;\n        let callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if (ref && ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            else if (event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n                this._resetHeartbeat();\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel.isMember(topic))\n                .forEach((channel) => channel.trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     */\n    endPointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     */\n    makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    _onConnOpen() {\n        this.log('transport', `connected to ${this.endPointURL()}`);\n        this._flushSendBuffer();\n        this.reconnectTimer.reset();\n        this._resetHeartbeat();\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel.trigger(CHANNEL_EVENTS.error));\n    }\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    _resetHeartbeat() {\n        this.pendingHeartbeatRef = null;\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n    _sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this.makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map"]},"metadata":{},"sourceType":"module"}