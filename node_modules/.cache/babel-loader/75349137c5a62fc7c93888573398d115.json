{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, put, remove } from './fetch';\nimport { DEFAULT_HEADERS } from './constants';\nexport class StorageBucketApi {\n  constructor(url, headers = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(`${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(`${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id, options = {\n    public: false\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(`${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.name,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(`${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(`${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(`${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/StorageBucketApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { get, post, put, remove } from './fetch';\nimport { DEFAULT_HEADERS } from './constants';\nexport class StorageBucketApi {\n    constructor(url, headers = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing product.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(`${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(`${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = { public: false }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(`${this.url}/bucket`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data: data.name, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(`${this.url}/bucket/${id}`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(`${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(`${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map"]},"metadata":{},"sourceType":"module"}